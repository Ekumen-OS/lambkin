Beluga AMCL vs Nav2 AMCL benchmarks
===================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Definition
----------

Configuration
^^^^^^^^^^^^^

Selected parameters include: 
*   the datasets that were used
*   the input sensor topics
*   the trajectories to compare, and the amount of iterations.

Objective
^^^^^^^^^

Compare trajectories generated by Beluga AMCL, to the trajectory generated by NAV2 AMCL,
 which is a widely adopted MCL-like localization solution, to contrast this novel drop-in replacement AMCL implementation (Beluga AMCL) to a known-good baseline.


Environment
^^^^^^^^^^^

- OS: Ubuntu 22.04 LTS
- ROS: ROS Humble
- Localization system:
    *   Beluga AMCL
    *   Nav2 AMCL

Dataset
~~~~~~~

Magazino datasets are published as part of the Cartographer Public Data repository.
These are commonly used for testing SLAM systems in ROS.

https://google-cartographer-ros.readthedocs.io/en/latest/data.html#magazino



Metrics
^^^^^^^

The following metrics were selected to understand different aspects of the SLAM system
under test.

To estimate quality of the localization system:

- **APE** (Absolute Pose Error): compares the reconstructed trajectory to the actual trajectory.
- **RPE** (Relative Pose Error): compares the reconstructed relative transformations between
  nearby poses to the actual relative transformations.


In order to measure the resource usage performance of the localization system:

- **RSS** (Resident Set Size): amount of space of physical memory (RAM) held by the localization system.
- **CPU Usage**: ratio between the time spent by the localization system, in both user and kernel space,
  and the total system time elapsed.

Aggregated information is provided for statistical analysis of the results.
For each metric, its median, mean, and standard deviation are provided.

Results
-------

In the following sections, the metrics generated by the benchmarking pipeline are presented.

Metrics
^^^^^^^

.. list-table:: Metric statistics

   * - .. plot::

         data = lks.data.pandas.inner_join([
             lks.data.evo.stats('/amcl_pose', 'ape'),
             lks.data.evo.stats('/amcl_pose', 'rpe'),
         ], on=['case.name', 'iteration.index'])


         data = data.melt(
             var_name='name',
             value_name='value',
             id_vars=['case.name', 'iteration.index'],
             value_vars=[
                 '/amcl_pose.ape.rmse',
                 '/amcl_pose.rpe.rmse',
             ],
         )

         data = data.replace({'name': {
             '/amcl_pose.ape.rmse': 'APE rmse (m)',
             '/amcl_pose.rpe.rmse': 'RPE rmse (m)',
         }})

         grid = sns.catplot(
             data=data, x='value', y='case.name',
             col='name', col_wrap=2, sharex=False,
             kind='violin'
         )
         grid.set_axis_labels(xlabel='Value', ylabel='')
         grid.tight_layout()

.. raw:: latex

   \clearpage

.. list-table:: Time series and histograms

   * - .. plot::

         sns.lineplot(
             lks.data.evo.series('/amcl_pose', 'ape'),
             x='/amcl_pose.ape.series.time',
             y='/amcl_pose.ape.series.value',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='APE (m)')

     - .. plot::

         sns.histplot(
             lks.data.evo.stats('/amcl_pose', 'ape'),
             x='/amcl_pose.ape.rmse', hue='case.name',
             element='step'
         )
         plt.gca().set(xlabel='APE rmse (m)', ylabel='Iteration Count')

   * - .. plot::

         sns.lineplot(
             lks.data.evo.series('/amcl_pose', 'rpe'),
             x='/amcl_pose.rpe.series.time',
             y='/amcl_pose.rpe.series.value',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='RPE (m)')

     - .. plot::
        
         sns.histplot(
             lks.data.evo.stats('/amcl_pose', 'rpe'),
             x='/amcl_pose.rpe.rmse',
             hue='case.name', element='step'
         )
         plt.gca().set(xlabel='RPE rmse (m)', ylabel='Iteration Count')

.. raw:: latex

   \clearpage

Estimated trajectories
^^^^^^^^^^^^^^^^^^^^^^

.. list-table:: Trajectories in the first runs before alignment

   * - .. plot::

         only_first_iterations = [
             location
             for location in lks.data.access.iterations()
             if location.metadata['iteration']['index'] == 1
         ]

         data = pd.concat([
             lks.data.evo.trajectory('/amcl_pose', only_first_iterations),
         ]).sort_values(by=['case.name', 'iteration.index', 'trajectory.name', 'trajectory.time'])

         sns.relplot(
             data, x='trajectory.x', y='trajectory.y',
             col='case.name', style='trajectory.name',
             col_wrap=2, kind='line', sort=False, lw=1
         )
         plt.gca().set(xlabel='X (m)', ylabel='Y (m)')
         plt.tight_layout()


Resource usage analysis
^^^^^^^^^^^^^^^^^^^^^^^

.. raw:: latex

   \clearpage

.. list-table:: Resource usage plots

   * - .. plot::

         sns.lineplot(
             lks.data.pandas.rescale(
                 lks.data.timem.history('amcl'), {
                     'amcl.series.virtual_memory': 1 / 8e6
                 }
             ),
             x='amcl.series.time',
             y='amcl.series.virtual_memory',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='Virtual Memory (MB)')

     - .. plot::

         sns.histplot(
             lks.data.pandas.rescale(
                 lks.data.timem.summary('amcl'), {
                     'amcl.summary.cpu_util': 100,
                 }
             ),
             x='amcl.summary.cpu_util',
             hue='case.name', element='step', kde=True
         )
         plt.gca().set(xlabel='CPU Usage (%)', ylabel='Iteration Count')

   * - .. plot::

         sns.lineplot(
             lks.data.pandas.rescale(
                 lks.data.timem.history('amcl'), {
                     'amcl.series.page_rss': 1 / 8e6
                 }
             ),
             x='amcl.series.time',
             y='amcl.series.page_rss',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='RSS (MB)')

     - .. plot::

         sns.histplot(
             lks.data.pandas.rescale(
                 lks.data.timem.summary('amcl'), {
                     'amcl.summary.peak_rss': 1 / 8e6
                 }
             ),
             x='amcl.summary.peak_rss',
             hue='case.name', element='step', kde=True
         )
         plt.gca().set(xlabel='Peak RSS (MB)', ylabel='Iteration Count')

.. raw:: latex

   \clearpage