SLAM Toolbox 2D SLAM benchmarks with TUM dataset
================================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Definition
----------

Configuration
^^^^^^^^^^^^^

LAMBKIN ran SLAM Toolbox with the following configuration. Selected parameters
include: the dataset sequences that were used, the input sensor topics, the
duration of each run, the publish rate factor, the trajectories to compare and
the amount of iterations.

.. include:: parametric_benchmark.robot
   :code: robotframework

Environment
^^^^^^^^^^^

- OS: Ubuntu 20.04.3 LTS
- ROS: ROS Noetic Ninjemys
- SLAM system: SLAM Toolbox 1.5.6

Dataset
^^^^^^^

TUM dataset consists of four sequences from an ActivMedia Pioneer 3 robot.
In the *Pioneer 360* sequence, the robot was driven in a loop around the center of the (mostly) empty hall.
The other sequences were recorded in a large hall with several office containers and boxes.
*Pioneer SLAM 1*, *Pioneer SLAM 2* and *Pioneer SLAM 3* differ in the actual trajectories but
all contain several loop closures.

A motion capture system from MotionAnalysis was used to record the ground-truth trajectory,

Computer Vision Group, TUM Department of Informatics, Technical University of Munich.
https://vision.in.tum.de/data/datasets/rgbd-dataset/download

A Benchmark for the Evaluation of RGB-D SLAM Systems (J. Sturm, N. Engelhard, F. Endres, W. Burgard and D. Cremers),
In Proc. of the International Conference on Intelligent Robot Systems (IROS), 2012.
http://dx.doi.org/10.1109/IROS.2012.6385773

Metrics
^^^^^^^

The following metrics were selected to understand different aspects of the SLAM system
under test.

To estimate quality of the SLAM system:

- **APE** (Absolute Pose Error): compares the reconstructed trajectory to the actual trajectory.
- **RPE** (Relative Pose Error): compares the reconstructed relative transformations between
  nearby poses to the actual relative transformations.

To estimate performance of the SLAM system:

- **RSS** (Resident Set Size): amount of space of physical memory (RAM) held by the SLAM system.
- **CPU Usage**: ratio between the time spent by the SLAM system, in both user and kernel space,
  and the total system time elapsed.

Aggregated information is provided for statistical analysis of the results.
For each metric, its median, mean, and standard deviation are provided.

Results
-------

In the following sections, the metrics generated by the benchmarking pipeline are presented.

.. list-table:: Metric value as a function of map resolution

   * - .. plot::

         data = pd.melt(
            frame = pd.read_hdf('metrics.data', 'df'),
            id_vars = ['run_id', 'test', 'dataset', 'resolution', 'search_resolution'],
            var_name = 'metric',
            value_name = 'value')
         data.replace({'metric': {
            'ape_rmse': 'APE rmse (m)',
            'rpe_rmse': 'RPE rmse (m)',
            'cpu_usage': 'CPU Usage (%)',
            'peak_rss': 'Peak RSS (MB)'
         }}, inplace=True);
         g = sns.relplot(data=data, x='resolution', y='value', hue='dataset', col='metric', col_wrap=2,
            style='search_resolution', kind='line', facet_kws={'sharey': False, 'sharex': True})
         g.set_axis_labels('Map resolution', '')
         g.tight_layout()

.. list-table:: Metric value as a function of search resolution

   * - .. plot::

         data = pd.melt(
            frame = pd.read_hdf('metrics.data', 'df'),
            id_vars = ['run_id', 'test', 'dataset', 'resolution', 'search_resolution'],
            var_name = 'metric',
            value_name = 'value')
         data.replace({'metric': {
            'ape_rmse': 'APE rmse (m)',
            'rpe_rmse': 'RPE rmse (m)',
            'cpu_usage': 'CPU Usage (%)',
            'peak_rss': 'Peak RSS (MB)'
         }}, inplace=True);
         g = sns.relplot(data=data, x='search_resolution', y='value', hue='dataset', col='metric', col_wrap=2,
            style='resolution', kind='line', facet_kws={'sharey': False, 'sharex': True})
         g.set_axis_labels('Search resolution', '')
         g.tight_layout()

.. raw:: latex

   \clearpage

Metrics
^^^^^^^

.. list-table:: Time series

   * - .. plot::

         data = pd.read_hdf('timeseries_rss.data', 'df')
         sns.lineplot(data=data, x='time', y='rss', hue='resolution', style='search_resolution', n_boot=20)
         plt.gca().set(xlabel='Time (s)', ylabel='RSS (MB)')

Estimated trajectories
^^^^^^^^^^^^^^^^^^^^^^

.. list-table:: Trajectories in the first runs before alignment

   * - .. plot::

         data = pd.read_hdf('timeseries_ape.data', 'df')
         data.sort_values(by=['run_id', 'traj', 'time'], ignore_index=True, inplace=True)
         g = sns.relplot(data=data.loc[data['run_id'] == '1'], x='x', y='y',
            style='traj', col='dataset', col_wrap=2, kind='line', sort=False, lw=1)
         g.tight_layout()
