SLAM Toolbox 2D SLAM benchmarks with Magazino dataset
=====================================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Definition
----------

Configuration
^^^^^^^^^^^^^

SLAM Toolbox performance was put to test as follows. Selected parameters
include: the datasets that were used, the input sensor topics, the
trajectories to compare, and the amount of iterations.

.. include:: ${benchmark_source}
   :code: robotframework

Environment
^^^^^^^^^^^

- OS: Ubuntu 20.04 LTS
- ROS: ROS Noetic Ninjemys
- SLAM system: SLAM Toolbox 1.5.6

Dataset
~~~~~~~

Magazino datasets are published as part of the Cartographer Public Data repository.
These are commonly used for testing SLAM systems in ROS.

https://google-cartographer-ros.readthedocs.io/en/latest/data.html#magazino

Metrics
^^^^^^^

The following metrics were selected to understand different aspects of the SLAM system
under test.

To estimate quality of the SLAM system:

- **APE** (Absolute Pose Error): compares the reconstructed trajectory to the actual trajectory.
- **RPE** (Relative Pose Error): compares the reconstructed relative transformations between
  nearby poses to the actual relative transformations.

To estimate performance of the SLAM system:

- **RSS** (Resident Set Size): amount of space of physical memory (RAM) held by the SLAM system.
- **CPU Usage**: ratio between the time spent by the SLAM system, in both user and kernel space,
  and the total system time elapsed.

Aggregated information is provided for statistical analysis of the results.
For each metric, its median, mean, and standard deviation are provided.

Results
-------

In the following sections, the metrics generated by the benchmarking pipeline are presented.

Metrics
^^^^^^^

.. list-table:: Metric statistics

   * - .. plot::

         data = lks.data.pandas.inner_join([
             lambkin.data.evo.stats('/tf:map.base_link', 'ape'),
             lambkin.data.evo.stats('/tf:map.base_link', 'rpe'),
             lambkin.data.timem.summary('sync_slam_toolbox_node')
         ], on=['case.name', 'iteration.index'])

         data = lks.data.pandas.rescale(data, {
             'sync_slam_toolbox_node.summary.cpu_util': 100,
             'sync_slam_toolbox_node.summary.peak_rss': 1 / 8e6
         })

         data = data.melt(
             var_name='metric',
             value_name='value',
             id_vars=['case.name', 'iteration.index'],
             value_vars=[
                 '/tf:map.base_link.ape.rmse',
                 '/tf:map.base_link.rpe.rmse',
                 'sync_slam_toolbox_node.summary.cpu_util',
                 'sync_slam_toolbox_node.summary.peak_rss'
             ],
         )

         data = data.replace({'metric': {
             '/tf:map.base_link.ape.rmse': 'APE rmse (m)',
             '/tf:map.base_link.rpe.rmse': 'RPE rmse (m)',
             'sync_slam_toolbox_node.summary.cpu_util': 'CPU usage (%)',
             'sync_slam_toolbox_node.summary.peak_rss': 'Peak RSS (MB)'
         }})

         grid = sns.catplot(
             data=data, x='value', y='case.name',
             col='metric', col_wrap=2, sharex=False,
             kind='violin'
         )
         grid.set_axis_labels(xlabel='Value', ylabel='')
         grid.tight_layout()

.. raw:: latex

   \clearpage

.. list-table:: Time series and histograms

   * - .. plot::

         sns.lineplot(
             lks.data.pandas.rescale(
                 lks.data.timem.history('sync_slam_toolbox_node'), {
                     'sync_slam_toolbox_node.series.virtual_memory': 1 / 8e6
                 }
             ),
             x='sync_slam_toolbox_node.series.time',
             y='sync_slam_toolbox_node.series.virtual_memory',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='Virtual Memory (MB)')

     - .. plot::

         sns.histplot(
             lks.data.pandas.rescale(
                 lks.data.timem.summary('sync_slam_toolbox_node'), {
                     'sync_slam_toolbox_node.summary.cpu_util': 100,
                 }
             ),
             x='sync_slam_toolbox_node.summary.cpu_util',
             hue='case.name', element='step', kde=True
         )
         plt.gca().set(xlabel='CPU Usage (%)', ylabel='Iteration Count')

   * - .. plot::

         sns.lineplot(
             lks.data.pandas.rescale(
                 lks.data.timem.history('sync_slam_toolbox_node'), {
                     'sync_slam_toolbox_node.series.page_rss': 1 / 8e6
                 }
             ),
             x='sync_slam_toolbox_node.series.time',
             y='sync_slam_toolbox_node.series.page_rss',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='RSS (MB)')

     - .. plot::

         sns.histplot(
             lks.data.pandas.rescale(
                 lks.data.timem.summary('sync_slam_toolbox_node'), {
                     'sync_slam_toolbox_node.summary.peak_rss': 1 / 8e6
                 }
             ),
             x='sync_slam_toolbox_node.summary.peak_rss',
             hue='case.name', element='step', kde=True
         )
         plt.gca().set(xlabel='Peak RSS (MB)', ylabel='Iteration Count')

   * - .. plot::

         sns.lineplot(
             lks.data.evo.series('/tf:map.base_link', 'ape'),
             x='/tf:map.base_link.ape.series.time',
             y='/tf:map.base_link.ape.series.value',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='APE (m)')

     - .. plot::

         sns.histplot(
             lks.data.evo.stats('/tf:map.base_link', 'ape'),
             x='/tf:map.base_link.ape.rmse', hue='case.name',
             element='step'
         )
         plt.gca().set(xlabel='APE rmse (m)', ylabel='Iteration Count')

   * - .. plot::

         sns.lineplot(
             lks.data.evo.series('/tf:map.base_link', 'rpe'),
             x='/tf:map.base_link.rpe.series.time',
             y='/tf:map.base_link.rpe.series.value',
             hue='case.name', n_boot=20
         )
         plt.gca().set(xlabel='Time (s)', ylabel='RPE (m)')

     - .. plot::

         sns.histplot(
             lks.data.evo.stats('/tf:map.base_link', 'rpe'),
             x='/tf:map.base_link.rpe.rmse',
             hue='case.name', element='step'
         )
         plt.gca().set(xlabel='RPE rmse (m)', ylabel='Iteration Count')

.. raw:: latex

   \clearpage

Estimated trajectories
^^^^^^^^^^^^^^^^^^^^^^

.. list-table:: Trajectories in the first runs before alignment

   * - .. plot::

         only_first_iterations = [
             location
             for location in lambkin.data.access.iterations()
             if location.metadata['iteration']['index'] == 1
         ]

         data = pd.concat([
             lks.data.evo.trajectory('/tf:map.base_link', only_first_iterations),
             lks.data.evo.trajectory('/tf:odom.base_link', only_first_iterations)
         ]).sort_values(by=['case.name', 'iteration.index', 'trajectory.name', 'trajectory.time'])

         ax = sns.relplot(
             data, x='trajectory.x', y='trajectory.y',
             col='case.name', style='trajectory.name',
             col_wrap=2, kind='line', sort=False, lw=1
         )
         plt.gca().set(xlabel='X (m)', ylabel='Y (m)')
         plt.tight_layout()
