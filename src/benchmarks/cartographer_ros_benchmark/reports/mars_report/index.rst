Cartographer ROS 2D SLAM benchmarks with MARS dataset
=====================================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Definition
----------

Configuration
~~~~~~~~~~~~~

LAMBKIN ran Cartographer ROS with the following configuration. Selected parameters
include: the dataset sequences that were used, the input sensor topics, the
duration of each run, the publish rate factor, the trajectories to compare and
the amount of iterations.

.. include:: mars_benchmark.robot
   :code: robotframework

Environment
~~~~~~~~~~~

- OS: Ubuntu 20.04.3 LTS
- ROS: ROS Noetic Ninjemys
- SLAM system: Cartographer ROS 1.0.0

.. raw:: pdf

   PageBreak

Dataset
~~~~~~~

A medium length (77m) mapping run, starting in the tracking system in the MARS lab, leaving
the lab and re-entering it through a different door, finally entering the tracking system again
and finishing at the start pose.

MARS datasets were collected in the Mobile Autonomous Robotics Systems Lab (MARS Lab)
of ShanghaiTech University with a hardware synchronized robot.

The ground-truth sources for evaluation are:
- Robot pose data from a tracking system
- 3D pointcloud from FARO
- 2D grid map from FARO

Mobile Autonomous Robotics Systems Lab of ShanghaiTech University.
https://robotics.shanghaitech.edu.cn/datasets/MARS-Dataset

Chen, H., Yang, Z., Zhao, X., Weng, G., Wan, H., Luo, J., Ye, X., Zhao, Z., He, Z., Shen, Y., & Schwertfeger, S. (2020).
Advanced mapping robot and high-resolution dataset. In Robotics and Autonomous Systems (Vol. 131, p. 103559). Elsevier BV.
https://doi.org/10.1016/j.robot.2020.103559

Metrics
~~~~~~~

The following metrics were selected to understand different aspects of the SLAM system
under test.

To estimate quality of the SLAM system:

- **APE** (Absolute Pose Error): compares the reconstructed trajectory to the actual trajectory.
- **RPE** (Relative Pose Error): compares the reconstructed relative transformations between
  nearby poses to the actual relative transformations.

To estimate performance of the SLAM system:

- **RSS** (Resident Set Size): amount of space of physical memory (RAM) held by the SLAM system.
- **CPU Usage**: ratio between the time spent by the SLAM system, in both user and kernel space,
  and the total system time elapsed.

Aggregated information is provided for statistical analysis of the results.
For each metric, its median, mean, and standard deviation are provided.

.. raw:: latex

   \clearpage

Results
-------

In the following sections, a description of each sequence and the resulting
metrics generated by the benchmarking pipeline are presented.

Metrics
*******

.. list-table:: Metric statistics

   * - .. plot::

         data = pd.melt(
            frame = pd.read_hdf('metrics.data', 'df'),
            id_vars = ['run_id', 'test', 'dataset'],
            var_name = 'metric',
            value_name = 'value')
         data.replace({'metric': {
            'ape_rmse': 'APE rmse (m)',
            'rpe_rmse': 'RPE rmse (m)',
            'cpu_usage': 'CPU Usage (%)',
            'peak_rss': 'Peak RSS (MB)'
         }}, inplace=True);
         g = sns.catplot(data=data, x='value', y='test', col='metric', col_wrap=2,
            kind='violin', sharex=False)
         g.set_axis_labels('Value', '')
         g.tight_layout()

.. raw:: latex

   \clearpage

.. list-table:: Time series and histograms

   * - .. plot::

         data = pd.read_hdf('timeseries_virtual_memory.data', 'df')
         sns.lineplot(data=data, x='time', y='virtual_memory', hue='test', n_boot=20)
         plt.gca().set(xlabel='Time (s)', ylabel='Virtual Memory (MB)')

     - .. plot::

         data = pd.read_hdf('metrics.data', 'df')
         sns.histplot(data=data, x='cpu_usage', hue='test', element='step', kde=True)
         plt.gca().set(xlabel='CPU Usage (%)', ylabel='Iteration Count')

   * - .. plot::

         data = pd.read_hdf('timeseries_rss.data', 'df')
         sns.lineplot(data=data, x='time', y='rss', hue='test', n_boot=20)
         plt.gca().set(xlabel='Time (s)', ylabel='RSS (MB)')

     - .. plot::

         data = pd.read_hdf('metrics.data', 'df')
         sns.histplot(data=data, x='peak_rss', hue='test', element='step')
         plt.gca().set(xlabel='Peak RSS (MB)', ylabel='Iteration Count')

   * - .. plot::

         data = pd.read_hdf('timeseries_ape.data', 'df')
         sns.lineplot(data=data, x='time', y='ape', hue='test', n_boot=20)
         plt.gca().set(xlabel='Time (s)', ylabel='APE (m)')

     - .. plot::

         data = pd.read_hdf('metrics.data', 'df')
         sns.histplot(data=data, x='ape_rmse', hue='test', element='step')
         plt.gca().set(xlabel='APE rmse (m)', ylabel='Iteration Count')

   * - .. plot::

         data = pd.read_hdf('timeseries_rpe.data', 'df')
         sns.lineplot(data=data, x='time', y='rpe', hue='test', n_boot=20)
         plt.gca().set(xlabel='Time (s)', ylabel='RPE (m)')

     - .. plot::

         data = pd.read_hdf('metrics.data', 'df')
         sns.histplot(data=data, x='rpe_rmse', hue='test', element='step')
         plt.gca().set(xlabel='RPE rmse (m)', ylabel='Iteration Count')

.. raw:: latex

   \clearpage

Estimated trajectories
**********************

.. list-table:: Trajectories in the first runs before alignment

   * - .. plot::

         data = pd.read_hdf('timeseries_ape.data', 'df')
         data.sort_values(by=['run_id', 'traj', 'time'], ignore_index=True, inplace=True)
         g = sns.relplot(data=data.loc[data['run_id'] == '1'], x='x', y='y',
            style='traj', col='test', col_wrap=2, kind='line', sort=False, lw=1)
         g.tight_layout()
